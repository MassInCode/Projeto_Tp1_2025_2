📁 src
└── 📁 main
    ├── 📁 java
    │   └── 📁 com
    │       └── 📁 nomedoprojeto
    │           │
    │           ├── 📁 controller  (Camada de Apresentação/Aplicação)
    │           │
    │           ├── 📁 exception   (Camada de Domínio)
    │           │
    │           ├── 📁 main        (Ponto de Entrada)
    │           │
    │           ├── 📁 model       (Camada de Domínio)
    │           │
    │           ├── 📁 repository  (Camada de Persistência)
    │           │
    │           └── 📁 util        (Camada de Infraestrutura)
    │
    └── 📁 resources
        └── 📁 com
            └── 📁 nomedoprojeto
                └── 📁 view        (Camada de Apresentação - View)




******************************************************
*** ESTRUTURA DE PACOTES E SUAS RESPONSABILIDADES  ***
******************************************************

• main:
  - Responsabilidade: Contém apenas a classe `Main.java`, que é o ponto de entrada responsável por iniciar a aplicação JavaFX.

• model:
  - Responsabilidade: Contém as classes que representam os dados e as regras de negócio do sistema (a camada de "domínio"). 
  - Exemplos: `Usuario.java`, `Candidato.java`, `Vaga.java`.

• view:
  - Responsabilidade: Fica na pasta `resources` e contém todos os arquivos de interface criados no Scene Builder (`.fxml`) e os arquivos de estilo (`.css`).

• controller:
  - Responsabilidade: Contém as classes com a lógica de cada tela, fazendo a ponte entre a interface (View) e os dados (Model). 
  - Exemplos: `LoginController.java`, `MainMenuController.java`.

• repository:
  - Responsabilidade: Camada de Persistência. Responsável exclusivamente pela leitura e escrita dos dados em arquivos, isolando essa lógica do resto do sistema. 
  - Exemplo: `UsuarioRepository.java`.

• util:
  - Responsabilidade: Camada de Infraestrutura. Contém classes com código reutilizável que pode ser usado em qualquer parte do projeto. 
  - Exemplo: `SceneSwitcher.java`.

• exception:
  - Responsabilidade: Contém as classes de exceções personalizadas para tratar erros específicos das regras de negócio, garantindo mensagens de erro claras ao usuário. 
  - Exemplo: `BusinessException.java`.